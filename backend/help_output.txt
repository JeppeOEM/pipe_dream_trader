Help on function ema in module pandas_ta.overlap.ema:

ema(close: pandas.core.series.Series, length: Union[int, numpy.integer] = None, talib: bool = None, presma: bool = None, offset: Union[int, numpy.integer] = None, **kwargs: Optional[dict]) -> pandas.core.series.Series
    Exponential Moving Average (EMA)
    
    The Exponential Moving Average is a more responsive moving average
    compared to the Simple Moving Average (SMA). The weights are determined
    by alpha which is proportional to it's length.  There are several
    different methods of calculating EMA. One method uses just the standard
    definition of EMA and another uses the SMA to generate the initial value
    for the rest of the calculation.
    
    Sources:
        https://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:moving_averages
        https://www.investopedia.com/ask/answers/122314/what-exponential-moving-average-ema-formula-and-how-ema-calculated.asp
    
    Args:
        close (pd.Series): Series of 'close's
        length (int): It's period. Default: 10
        talib (bool): If TA Lib is installed and talib is True, Returns
            the TA Lib version. Default: True
        presma (bool, optional): If True, uses SMA for initial value like
            TA Lib. Default: True
        offset (int): How many periods to offset the result. Default: 0
    
    Kwargs:
        adjust (bool, optional): Default: False
        fillna (value, optional): pd.DataFrame.fillna(value)
    
    Returns:
        pd.Series: New feature generated.

Help on function bbands in module pandas_ta.volatility.bbands:

bbands(close: pandas.core.series.Series, length: Union[int, numpy.integer] = None, std: Union[int, numpy.integer, float, numpy.floating] = None, ddof: Union[int, numpy.integer] = 0, mamode: str = None, talib: bool = None, offset: Union[int, numpy.integer] = None, **kwargs: Optional[dict]) -> pandas.core.frame.DataFrame
    Bollinger Bands (BBANDS)
    
    A popular volatility indicator by John Bollinger.
    
    Sources:
        https://www.tradingview.com/wiki/Bollinger_Bands_(BB)
    
    Args:
        close (pd.Series): Series of 'close's
        length (int): The short period. Default: 5
        std (int): The long period. Default: 2
        ddof (int): Degrees of Freedom to use. Default: 0
        mamode (str): See ``help(ta.ma)``. Default: 'sma'
        talib (bool): If TA Lib is installed and talib is True, Returns
            the TA Lib version. Default: True
        ddof (int): Delta Degrees of Freedom.
                    The divisor used in calculations is N - ddof, where N
                    represents the number of elements. The 'talib' argument
                    must be false for 'ddof' to work. Default: 1
        offset (int): How many periods to offset the result. Default: 0
    
    Kwargs:
        fillna (value, optional): pd.DataFrame.fillna(value)
    
    Returns:
        pd.DataFrame: lower, mid, upper, bandwidth, and percent columns.

Help on function kc in module pandas_ta.volatility.kc:

kc(high: pandas.core.series.Series, low: pandas.core.series.Series, close: pandas.core.series.Series, length: Union[int, numpy.integer] = None, scalar: Union[int, numpy.integer, float, numpy.floating] = None, tr: bool = None, mamode: str = None, offset: Union[int, numpy.integer] = None, **kwargs: Optional[dict]) -> pandas.core.frame.DataFrame
    Keltner Channels (KC)
    
    A popular volatility indicator similar to Bollinger Bands and
    Donchian Channels.
    
    Sources:
        https://www.tradingview.com/wiki/Keltner_Channels_(KC)
    
    Args:
        high (pd.Series): Series of 'high's
        low (pd.Series): Series of 'low's
        close (pd.Series): Series of 'close's
        length (int): The short period.  Default: 20
        scalar (float): A positive float to scale the bands. Default: 2
        mamode (str): See ``help(ta.ma)``. Default: 'ema'
        offset (int): How many periods to offset the result. Default: 0
    
    Kwargs:
        tr (bool): When True, it uses True Range for calculation.
            When False, use a high - low as it's range calculation.
            Default: True
        fillna (value, optional): pd.DataFrame.fillna(value)
    
    Returns:
        pd.DataFrame: lower, basis, upper columns.

